define platform windows
define machine	32bit

;; in fasm, "dup" is a reserved word
dup equ duplicate

;; in fasm, "end" is a reserved word
finish equ end
end equ exit

match =32bit, machine {

jo_size = 4 ;; (byte)
xx equ dd

rax equ eax
rbx equ ebx
rcx equ ecx
rdx equ edx
rsp equ esp
rbp equ ebp
rsi equ esi
rdi equ edi

syscall equ int 80h

}

match =windows =32bit, platform machine {

define STD_INPUT_HANDLE  -10
define STD_OUTPUT_HANDLE -11

}

match =windows =32bit, platform machine {

format PE console as "32.exe"

}



current_free_address$un_initialized_memory = address$un_initialized_memory

labeling  equ = current_free_address$un_initialized_memory
preserve  equ current_free_address$un_initialized_memory = current_free_address$un_initialized_memory +

preserve 64 * jo_size
address$argument_stack labeling
   preserve 1024 * 1024 * jo_size

match =64bit, machine {

;; if you want to extend cicada in assembly
;; the following registers must NOT be used

define pointer$argument_stack r15

}

match =64bit, machine {

macro push_argument_stack register \{
   mov [pointer$argument_stack], register
   add pointer$argument_stack, jo_size
\}

macro pop_argument_stack register \{
   sub pointer$argument_stack, jo_size
   mov register, [pointer$argument_stack]
\}

}

match =32bit, machine {

pointer$argument_stack:
   xx address$argument_stack

}

match =32bit, machine {

macro push_argument_stack register \{
   if register in <eax>
   push ebx
   mov ebx, [pointer$argument_stack]
   mov [ebx], register
   add ebx, jo_size
   mov [pointer$argument_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$argument_stack]
   mov [eax], register
   add eax, jo_size
   mov [pointer$argument_stack], eax
   pop eax
   finish if
\}

macro pop_argument_stack register \{
   if register in <eax>
   push ebx
   mov ebx, [pointer$argument_stack]
   sub ebx, jo_size
   mov register, [ebx]
   mov [pointer$argument_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$argument_stack]
   sub eax, jo_size
   mov register, [eax]
   mov [pointer$argument_stack], eax
   pop eax
   finish if
\}

}

preserve 64 * jo_size
address$return_stack labeling
   preserve 1024 * 1024 * jo_size

match =64bit, machine {

;; if you want to extend cicada in assembly
;; the following registers must NOT be used

define pointer$return_stack r14

}

match =64bit, machine {

macro push_return_stack register \{
   mov [pointer$return_stack], register
   add pointer$return_stack, jo_size
\}

macro pop_return_stack register \{
   sub pointer$return_stack, jo_size
   mov register, [pointer$return_stack]
\}

}

match =32bit, machine {

pointer$return_stack:
   xx address$return_stack

}

match =32bit, machine {

macro push_return_stack register \{
   if register in <eax>
   push ebx
   mov ebx, [pointer$return_stack]
   mov [ebx], register
   add ebx, jo_size
   mov [pointer$return_stack], ebx
   pop ebx
   else
   push eax
   mov eax, [pointer$return_stack]
   mov [eax], register
   add eax, jo_size
   mov [pointer$return_stack], eax
   pop eax
   finish if
\}

macro pop_return_stack register \{
   if register in <eax>
   mov ebx, [pointer$return_stack]
   sub ebx, jo_size
   mov register, [ebx]
   mov [pointer$return_stack], ebx
   else
   mov eax, [pointer$return_stack]
   sub eax, jo_size
   mov register, [eax]
   mov [pointer$return_stack], eax
   finish if
\}

}

match =64bit, machine {

macro next \{
   pop_return_stack rbx
     mov rax, [rbx]
   add rbx, jo_size
   push_return_stack rbx
     jmp qword [rax]
\}

}


match =32bit, machine {

macro next \{
   pop_return_stack rbx
     mov rax, [rbx]
   add rbx, jo_size
   push_return_stack rbx
     jmp dword [rax]
\}

}

match =windows =32bit, platform machine {

__exit_with_TOS:

   pop_argument_stack rax
   push rax
   call [ExitProcess]

}

match =windows =32bit, platform machine {

__exit_with_zero:

   push 0
   call [ExitProcess]

}

match =windows =32bit, platform machine {

__exit_with_six:

   push 6
   call [ExitProcess]

}

;; initial link to point to 0 (as null)
link = 0

size$primitive_string_heap = 100 * 1024 ;; (byte)

address$primitive_string_heap:
   times size$primitive_string_heap db 0

current_free_address$primitive_string_heap = address$primitive_string_heap

macro make_primitive_string string {

virtual at 0
.start$string:
   db string
.end$string:
   dw (.end$string - .start$string)
   load .length word from (.end$string)
finish virtual
store word .length at (current_free_address$primitive_string_heap)

current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 2

repeat .length
   virtual at 0
      db string
      load .char byte from (% - 1)
   finish virtual
   store byte .char at (current_free_address$primitive_string_heap)
   current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 1
finish repeat

}

macro define_function string, jo {

define_function__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx explain$function

   ;; here follows a jojo as function-body

}

explain$function:
   add rax, jo_size
   push_return_stack rax
   next

macro define_primitive_function string, jo {

define_primitive_function__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx assembly_code__#jo

assembly_code__#jo:

   ;; here follows assembly code
   ;; as primitive function body

}

macro define_variable string, jo {

define_variable__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx explain$variable

   ;; here follows a value of jo_size
   ;; only one value is allowed

}

explain$variable:
   add rax, jo_size
   mov rbx, [rax]
   push_argument_stack rbx
   next

define_primitive_function "end", end
   pop_return_stack rbx
   next

match =64bit, machine {

define_primitive_function "<>", taca
   pop_return_stack rbx
   mov rax, [rbx]
   jmp qword [rax]
}


match =32bit, machine {

define_primitive_function "<>", taca
   pop_return_stack rbx
   mov rax, [rbx]
   jmp dword [rax]

}

match =windows =32bit, platform machine {

_output_handle:
   xx 0
_input_handle:
   xx 0

begin_to_interpret_threaded_code:

   cld ;; set DF = 0, then rsi and rdi are incremented

   push STD_INPUT_HANDLE
   call [GetStdHandle]
   mov [_input_handle], rax

   push STD_OUTPUT_HANDLE
   call [GetStdHandle]
   mov [_output_handle], rax

   mov rax, first_jojo
   push_return_stack rax
   next

}

first_jojo:
   xx little_test

define_primitive_function "bye", exit_with_TOS
   call __exit_with_TOS

define_variable "", V__little_test_number
   xx 3


define_function "little_test", little_test

   ;;;; variable
   ;; xx V__little_test_number
   ;; xx exit_with_TOS
   ;;;; exit ocde : 3

   ;;;; literal
   xx literal, 4
   xx exit_with_TOS
   ;;;; exit ocde : 4

   ;;;; address
   ;; xx address, V__little_test_number, fetch, add2
   ;; xx address, V__little_test_number, save
   ;; xx V__little_test_number
   ;; xx exit_with_TOS
   ;;;; exit ocde : 5

   ;;;; taca
   ;; xx literal, 2
   ;; xx literal, 4
   ;; xx power
   ;; xx exit_with_TOS
   ;;;; exit ocde : 16

define_primitive_function "drop", drop
   ;; << a -- >>
   pop_argument_stack rax
   next

define_primitive_function "drop2", drop2
   ;; << a b -- >>
   pop_argument_stack rax
   pop_argument_stack rax
   next

match =32bit, machine {

define_primitive_function "dup", dup
   ;; << a -- a a >>
   pop_argument_stack rax
   push_argument_stack rax
   push_argument_stack rax
   next

define_primitive_function "dup2", dup2
   ;; << a b -- a b a b >>
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rax
   push_argument_stack rbx
   next

}

match =32bit, machine {

define_primitive_function "over", over
   ;; << a b -- a b | a >>
   mov rbx, [pointer$argument_stack]
   mov rax, [rbx - (2 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "x|over|xx", xoverxx
   ;; << a | b c -- a | b c | a >>
   mov rbx, [pointer$argument_stack]
   mov rax, [rbx - (3 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "xx|over|x", xxoverx
   ;; << a b | c -- a b | c | a b >>
   mov rbx, [pointer$argument_stack]
   mov rax, [rbx - (3 * jo_size)]
   push_argument_stack rax
   mov rax, [rbx - (2 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "xx|over|xx", xxoverxx
   ;; << a b | c d -- a b | c d | a b >>
   mov rbx, [pointer$argument_stack]
   mov rax, [rbx - (4 * jo_size)]
   push_argument_stack rax
   mov rax, [rbx - (3 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "x|over|xxx", xoverxxx
   ;; << a | b c d -- a | b c d | a >>
   mov rbx, [pointer$argument_stack]
   mov rax, [rbx - (4 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "xx|over|xxxx", xxoverxxxx
   ;; << a b | c d e f -- a b | c d e f | a b >>
   mov rbx, [pointer$argument_stack]
   mov rax, [rbx - (6 * jo_size)]
   push_argument_stack rax
   mov rax, [rbx - (5 * jo_size)]
   push_argument_stack rax
   next

}

define_primitive_function "tuck", tuck
   ;; << a b -- b | a b >>
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rax
   push_argument_stack rbx
   next

define_primitive_function "x|tuck|xx", xtuckxx
   ;; << a | b c -- b c | a | b c >>
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   next

define_primitive_function "xx|tuck|x", xxtuckx
   ;; << a b | c -- c | a b | c >>
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   next

define_primitive_function "xx|tuck|xx", xxtuckxx
   ;; << a b | c d -- c d | a b | c d >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rdx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   next

define_primitive_function "xxx|tuck|x", xxxtuckx
   ;; << a b c | d -- d | a b c | d >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rdx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   next

match =32bit, machine {

define_primitive_function "swap", swap
   ;; << a b -- b a >>
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ebx
   push_argument_stack eax
   next

define_primitive_function "x|swap|xx", xswapxx
   ;; << a | b c -- b c | a >>
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ebx
   push_argument_stack ecx
   push_argument_stack eax
   next

define_primitive_function "xx|swap|x", xxswapx
   ;; << a b | c -- c | a b >>
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ecx
   push_argument_stack eax
   push_argument_stack ebx
   next

define_primitive_function "x|swap|xxx", xswapxxx
   ;; << a | b c d -- b c d | a >>
   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ebx
   push_argument_stack ecx
   push_argument_stack edx
   push_argument_stack eax
   next

define_primitive_function "xxx|swap|x", xxxswapx
   ;; << a b c | d -- d | a b c >>
   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack edx
   push_argument_stack eax
   push_argument_stack ebx
   push_argument_stack ecx
   next

define_primitive_function "xx|swap|xx", xxswapxx
   ;; << a b | c d -- c d | a b >>
   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ecx
   push_argument_stack edx
   push_argument_stack eax
   push_argument_stack ebx
   next


define_primitive_function "x|swap|xxxx", xswapxxxx
   ;; << a | b c d e -- b c d e | a >>
   pop_argument_stack eax ;; e
   push eax

   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ebx
   push_argument_stack ecx
   push_argument_stack edx

   pop eax
   push_argument_stack eax ;; e

   push_argument_stack eax
   next

define_primitive_function "xxxx|swap|x", xxxxswapx
   ;; << a b c d | e --  e | a b c d >>
   pop_argument_stack eax ;; e
   push eax

   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax

   pop eax
   push_argument_stack eax ;; e

   push_argument_stack eax
   push_argument_stack ebx
   push_argument_stack ecx
   push_argument_stack edx
   next


define_primitive_function "xx|swap|xxxx", xxswapxxxx
   ;; << a b | c d e f -- c d e f | a b >>
   pop_argument_stack eax ;; f
   push eax

   pop_argument_stack eax ;; e
   push eax

   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax
   push_argument_stack ecx
   push_argument_stack edx

   pop eax
   push_argument_stack eax ;; e

   pop eax
   push_argument_stack eax ;; f

   push_argument_stack eax
   push_argument_stack ebx
   next

define_primitive_function "xxxx|swap|xx", xxxxswapxx
   ;; << a b c d | e f --  e f | a b c d >>
   pop_argument_stack eax ;; f
   push eax

   pop_argument_stack eax ;; e
   push eax

   pop_argument_stack edx
   pop_argument_stack ecx
   pop_argument_stack ebx
   pop_argument_stack eax

   pop eax
   push_argument_stack eax ;; e

   pop eax
   push_argument_stack eax ;; f

   push_argument_stack eax
   push_argument_stack ebx
   push_argument_stack ecx
   push_argument_stack edx
   next

}

define_variable "*literal*", V__literal
   xx literal

define_primitive_function "", literal
   ;; << -- fixnum >>
   pop_return_stack rbx
     mov rax, [rbx]
     push_argument_stack rax
   add rbx, jo_size
   push_return_stack rbx
   next

define_variable "*address*", V__address
   xx address

define_primitive_function "", address
   ;; << -- address >>
   pop_return_stack rbx
     mov rax, [rbx]
     add rax, jo_size
     push_argument_stack rax
   add rbx, jo_size
   push_return_stack rbx
   next

define_variable "*branch*", V__branch
   xx branch

define_primitive_function "", branch
   pop_return_stack rbx
   mov rax, [rbx]
   imul rax, jo_size
   add rbx, rax
   push_return_stack rbx
   next

define_variable "*false?branch*", V__false?branch
   xx false?branch

define_primitive_function "", false?branch
   ;; << true of false -- >>
   pop_argument_stack rax
   test rax, rax
   jnz help__false?branch__not_to_branch

   pop_return_stack rbx
   mov rax, [rbx]
   imul rax, jo_size
   add rbx, rax
   push_return_stack rbx
   next

help__false?branch__not_to_branch:
   pop_return_stack rbx
   add rbx, jo_size
   push_return_stack rbx
   next

define_primitive_function "false", false
   ;; << -- false >>
   xor rax, rax
   push_argument_stack rax
   next

define_primitive_function "true", true
   ;; << -- true >>
   xor rax, rax
   inc rax
   push_argument_stack rax
   next

define_function "false?", false?
   ;; << bool -- bool >>
   xx false, equal?
   xx end

define_function "true?", true?
   ;; << bool -- bool >>
   xx true, equal?
   xx end

match =32bit, machine {

define_primitive_function "bitwise-and", bitwise_and
   ;; << a, b -- a and b >>
   pop_argument_stack rbx
   mov rax, [pointer$argument_stack]
   and [rax - (1 * jo_size)], rbx
   next

define_primitive_function "bitwise-or", bitwise_or
   ;; << a, b -- a or b >>
   pop_argument_stack rbx
   mov rax, [pointer$argument_stack]
   or  [rax - (1 * jo_size)], rbx
   next

define_primitive_function "bitwise-xor", bitwise_xor
   ;; << a, b -- a xor b >>
   pop_argument_stack rbx
   mov rax, [pointer$argument_stack]
   xor [rax - (1 * jo_size)], rbx
   next

define_primitive_function "bitwise-invert", bitwise_invert
   ;; << a -- invert a >>
   mov rax, [pointer$argument_stack]
   not dword [rax - (1 * jo_size)]
   next

}

define_primitive_function "zero", zero
   ;; << -- 0 >>
   xor rax, rax
   push_argument_stack rax
   next

define_primitive_function "one", one
   ;; << -- 1 >>
   xor rax, rax
   inc rax
   push_argument_stack rax
   next

define_function "zero?", zero?
   ;; << bool -- bool >>
   xx zero, equal?
   xx end

define_function "one?", one?
   ;; << bool -- bool >>
   xx one, equal?
   xx end

match =32bit, machine {

define_primitive_function "add1", add1
   ;; << n -- n+1 >>
   pop_argument_stack rax
   inc rax
   push_argument_stack rax
   next

define_primitive_function "add2", add2
   ;; << n -- n+2 >>
   pop_argument_stack rax
   inc rax
   inc rax
   push_argument_stack rax
   next

define_primitive_function "add3", add3
   ;; << n -- n+3 >>
   pop_argument_stack rax
   inc rax
   inc rax
   inc rax
   push_argument_stack rax
   next

define_primitive_function "add4", add4
   ;; << n -- n+4 >>
   pop_argument_stack rax
   inc rax
   inc rax
   inc rax
   inc rax
   push_argument_stack rax
   next

define_primitive_function "add8", add8
   ;; << n -- n+8 >>
   pop_argument_stack rax
   add rax, 8
   push_argument_stack rax
   next


define_primitive_function "sub1", sub1
   ;; << n -- n-1 >>
   pop_argument_stack rax
   dec rax
   push_argument_stack rax
   next

define_primitive_function "sub2", sub2
   ;; << n -- n-2 >>
   pop_argument_stack rax
   dec rax
   dec rax
   push_argument_stack rax
   next

define_primitive_function "sub3", sub3
   ;; << n -- n-3 >>
   pop_argument_stack rax
   dec rax
   dec rax
   dec rax
   push_argument_stack rax
   next

define_primitive_function "sub4", sub4
   ;; << n -- n-4 >>
   pop_argument_stack rax
   dec rax
   dec rax
   dec rax
   dec rax
   push_argument_stack rax
   next

define_primitive_function "sub8", sub8
   ;; << n -- n-8 >>
   pop_argument_stack rax
   sub rax, 8
   push_argument_stack rax
   next


define_primitive_function "add", addition
   ;; << a b -- a+b >>
   pop_argument_stack rbx
   pop_argument_stack rax
   add rax, rbx
   push_argument_stack rax
   next

define_primitive_function "sub", subtraction
   ;; << a b -- a-b >>
   pop_argument_stack rbx
   pop_argument_stack rax
   sub rax, rbx
   push_argument_stack rax
   next

}

define_primitive_function "mul", multiple
   ;; << a b -- a*b >>
   pop_argument_stack  rbx ;; 2ed arg
   pop_argument_stack  rax ;; 1st arg
   imul rbx, rax
   ;; imul will ignore overflow
   ;; when there are two registers as arg
   ;; imul will save the result into the first register
   push_argument_stack rbx
   next

define_function "negate", negate
   ;; << n --  -n >>
   xx zero
   xx swap, subtraction
   xx end

define_function "power", power
   ;; n must be nature number for now
   ;; << a, n -- a^n >>
   xx literal, 1, swap ;; leave product
   xx help__power
   xx end

define_function "help,power", help__power
   ;; << a, product, n -- a^n >>
   xx dup, zero?, false?branch, 5
   xx	drop, swap, drop
   xx	end
   xx sub1
   xx swap
   xx	xoverxx, multiple
   xx swap
   xx taca, help__power

define_primitive_function "moddiv", moddiv
   ;; << a, b -- a mod b, quotient >>
   ;; << dividend, divisor -- remainder, quotient >>
   ;; the arg of idiv is divisor
   ;; the lower half of dividend is taken from rax
   ;; the upper half of dividend is taken from rdx
   xor	rdx, rdx   ;; high-part of dividend is not used
   pop_argument_stack  rbx ;; 2ed arg
   pop_argument_stack  rax ;; 1st arg
   idiv rbx
   ;; the remainder is stored in rdx
   ;; the quotient  is stored in rax
   push_argument_stack rdx ;; remainder
   push_argument_stack rax ;; quotient
   next


define_function "divmod", divmod
   ;; << a, b -- quotient, a mod b >>
   xx moddiv, swap
   xx end

define_function "div", division
   ;; << a, b -- quotient >>
   xx divmod, drop
   xx end

define_function "mod", modulo
   ;; << a, b -- a mod b >>
   xx moddiv, drop
   xx end

define_primitive_function "equal?", equal?
   ;; << a, b -- a, b, true of false >>
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp	 rbx, rax
   sete  al
   movzx rax, al
   push_argument_stack rax
   next

define_primitive_function "less-than?", less_than?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp	 rax, rbx
   setl  al
   movzx rax, al
   push_argument_stack rax
   next

define_primitive_function "greater-than?", greater_than?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp	 rax, rbx
   setg  al
   movzx rax, al
   push_argument_stack	rax
   next

define_primitive_function "less-or-equal?", less_or_equal?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp	 rax, rbx
   setle al
   movzx rax, al
   push_argument_stack rax
   next

define_primitive_function "greater-or-equal?", greater_or_equal?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp	 rax, rbx
   setge al
   movzx rax, al
   push_argument_stack rax
   next

define_function "negative?", negative?
   ;; << integer -- bool >>
   xx zero, less_than?
   xx end

define_function "positive?", positive?
   ;; << integer -- bool >>
   xx negative?, false?
   xx end

match =32bit, machine {

;; "save" and "fetch" default to a jo_size
;; the rule of "fetch2" and so on are:
;;   in memory:
;;     ||  1 : value-1	||
;;     ||  1 : value-2	||
;;     ||  1 : value-3	||
;;     ...
;;   on stack:
;;     << value-1, value-2, value-3, ... >>
;; of course we have:
;;   fetch2 : memory=copy=>stack
;;   save2  : stack->memory

define_primitive_function "save", save
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov [rbx], rax
   next

define_primitive_function "save-byte", save_byte
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov byte[rbx], al
   next

define_primitive_function "save-two-bytes", save_two_bytes
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov word [rbx], ax
   next

define_primitive_function "save-four-bytes", save_four_bytes
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov dword [rbx], eax
   next

define_primitive_function "n-save", n_save
   ;; << value-n, ..., value-1, address, n -- >>
   pop_argument_stack rcx
   pop_argument_stack rdx
   mov rax, jo_size
   imul rax, rcx
   add rdx, rax
   ;; for address is based on 0
   ;; but n is based on 1
   sub rdx, jo_size
.loop:
   pop_argument_stack rax
   mov dword [rdx], rax
   sub rdx, jo_size
   loop .loop
   next

define_function "save2", save2
   ;; << value-2, value-1, address -- >>
   xx literal, 2
   xx n_save
   xx end

define_primitive_function "n-save-byte", n_save_byte
   ;; << value-n, ..., value-1, address, n -- >>
   pop_argument_stack rcx
   pop_argument_stack rdx
   add rdx, rcx
   dec rdx
.loop:
   pop_argument_stack rax
   mov byte [rdx], al
   dec rdx
   loop .loop
   next

define_primitive_function "add-save", add_save
   ;; ( number to add, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   add dword [rbx], rax
   next

define_primitive_function "sub-save", sub_save
   ;; ( number to add, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   sub dword [rbx], rax
   next

}

match =32bit, machine {

define_primitive_function "fetch", fetch
   ;; ( address -- value )
   pop_argument_stack  rbx
   mov rax, [rbx]
   push_argument_stack rax
   next

define_primitive_function "fetch-byte", fetch_byte
   ;; ( address -- value )
   pop_argument_stack rbx
   xor rax, rax
   mov al, byte[rbx]
   push_argument_stack rax
   next

define_primitive_function "fetch-two-bytes", fetch_two_bytes
   ;; ( address -- value )
   pop_argument_stack rbx
   xor rax, rax
   mov ax, word [rbx]
   push_argument_stack rax
   next

define_primitive_function "fetch-four-bytes", fetch_four_bytes
   ;; ( address -- value )
   pop_argument_stack rbx
   xor rax, rax
   mov eax, dword [rbx]
   push_argument_stack rax
   next

;;   in memory:
;;     ||  1 : value-1	||
;;     ...
;;     ||  1 : value-n	||
define_primitive_function "n-fetch", n_fetch
   ;; << address, n -- value-1, ..., value-n >>
   pop_argument_stack  rcx
   pop_argument_stack  rdx
.loop:
   mov rax, dword [rdx]
   push_argument_stack rax
   add rdx, jo_size
   loop .loop
   next

define_primitive_function "n-fetch-byte", n_fetch_byte
   ;; << address, n -- byte-1, ..., byte-n >>
   pop_argument_stack  rcx
   pop_argument_stack  rdx
   xor rax, rax
.loop:
   mov al, byte [rdx]
   push_argument_stack rax
   inc rdx
   loop .loop
   next

define_function "fetch2", fetch2
   ;; << address -- value-1, value-2 >>
   xx literal, 2
   xx n_fetch
   xx end

}

define_variable "*un-initialized-memory*", V__un_initialized_memory
  xx address$un_initialized_memory

define_variable "*size,un-initialized-memory*", V__size__un_initialized_memory
  xx size$un_initialized_memory

define_variable "*current-free-address,un-initialized-memory*", V__current_free_address__un_initialized_memory
  xx current_free_address$un_initialized_memory



if platform eq windows
if machine eq 32bit

; Macroinstructions for making import section

macro library [name,string] {
   common
    import.data:
   forward
    local _label
    if defined name#.redundant
     if ~ name#.redundant
      dd RVA name#.lookup,0,0,RVA _label,RVA name#.address
     finish if
    finish if
    name#.referred = 1
   common
    dd 0,0,0,0,0
   forward
    if defined name#.redundant
     if ~ name#.redundant
      _label db string,0
	     rb RVA $ and 1
     finish if
    finish if
}

macro import name,[label,string]
 { common
    rb (- rva $) and 3
    if defined name#.referred
     name#.lookup:
   forward
     if used label
      if string eqtype ''
       local _label
       dd RVA _label
      else
       dd 80000000h + string
      finish if
     finish if
   common
     if $ > name#.lookup
      name#.redundant = 0
      dd 0
     else
      name#.redundant = 1
     finish if
     name#.address:
   forward
     if used label
      if string eqtype ''
       label dd RVA _label
      else
       label dd 80000000h + string
      finish if
     finish if
   common
     if ~ name#.redundant
      dd 0
     finish if
   forward
     if used label & string eqtype ''
     _label dw 0
	    db string,0
	    rb RVA $ and 1
     finish if
   common
    finish if
}

finish if
finish if

match =windows =32bit, platform machine {

section '.idata' import data readable writeable

library kernel32,'KERNEL32.DLL'

import kernel32,\
       ExitProcess,'ExitProcess',\
       ReadFile,'ReadFile',\
       WriteFile,'WriteFile',\
       GetStdHandle,'GetStdHandle',\
       CloseHandle, 'CloseHandle',\
       CreateFileA, 'CreateFileA'

}







match =windows =64bit, platform machine {
define_primitive_function "sort2", sort2
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp rax, rbx
   setg al
   setl a2
   movzx rax, al
   movzx rbx, a2
   push_argument_stack rax
   push_argument_stack rbx
   next
define_primitive_function "sort3", sort3
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp rax, rbx
   setg al
   setl a2
   movzx rax, al
   movzx rbx, a2
   cmp rbx, rcx
   setg a3
   setl a4
   movzx rbx, a3
   movze rcx, a4
   push_argument_stack rcx
   cmp rax rbx
   setg a5
   setl a6
   movzx rax, a5
   movzx rbx, a6
   push_argument_stack rbx
   push_argument_stack rax
   next
}


match =windows =32bit, platform machine {

size$un_initialized_memory = 64 * 1024 * 1024 ;; (byte)

section '.data' data readable writeable
address$un_initialized_memory:
   rb size$un_initialized_memory
}


match =windows =32bit, platform machine {

entry begin_to_interpret_threaded_code
section '.text' code writeable readable executable
mov rax, 23
mov rbx, 36
mov rcx, 12
push_argument_stack rax
push_argument_stack rbx
push_argument_stack rcx
}



