macro windows_function number_of_arguments {
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx
}

macro end_windows_function {
   mov rsp, rbp
   pop rbp
}
finish equ end
macro library [name,string]
 { common
    import.data:
   forward
    local _label
    if defined name#.redundant
     if ~ name#.redundant
      dd RVA name#.lookup,0,0,RVA _label,RVA name#.address
     finish if
    finish if
    name#.referred = 1
   common
    dd 0,0,0,0,0
   forward
    if defined name#.redundant
     if ~ name#.redundant
      _label db string,0
	     rb RVA $ and 1
     finish if
    finish if }

macro import name,[label,string]
 { common
    rb (- rva $) and 7
    if defined name#.referred
     name#.lookup:
   forward
     if used label
      if string eqtype ''
       local _label
       dq RVA _label
      else
       dq 8000000000000000h + string
      finish if
     finish if
   common
     if $ > name#.lookup
      name#.redundant = 0
      dq 0
     else
      name#.redundant = 1
     finish if
     name#.address:
   forward
     if used label
      if string eqtype ''
       label dq RVA _label
      else
       label dq 8000000000000000h + string
      finish if
     finish if
   common
     if ~ name#.redundant
      dq 0
     finish if
   forward
     if used label & string eqtype ''
     _label dw 0
	    db string,0
	    rb RVA $ and 1
     finish if
   common
    finish if }
define fun_4_r9  r9
define fun_3_r8  r8
define fun_2_rdx rdx
define fun_1_rcx rcx

define STD_INPUT_HANDLE  -10
define STD_OUTPUT_HANDLE -11



format PE64 console
entry display_message


section '.text' code writeable readable executable

display_message:

windows_function 4

   mov cx,2
   s:
   sub rsp, 8*4
   mov fun_4_r9, 0
   mov fun_3_r8, caption
   mov fun_2_rdx, message
   mov fun_1_rcx, 0
   call [MessageBoxA]
   loop s

end_windows_function
end_windows_function


windows_function 4
   sub rsp, 8*4
   mov fun_1_rcx, 0
   call [ExitProcess]
end_windows_function

caption:
   db  ""
caption_size = ($ - caption)

message:
   db "Happy children's day !", 10
message_size = ($ - message)

counter:
   dq 0

\


section '.idata' import data readable writeable

library kernel32,'KERNEL32.DLL',\
	user32,'USER32.DLL'

import kernel32,\
       ExitProcess,'ExitProcess'

import user32,\
       MessageBoxA, 'MessageBoxA'