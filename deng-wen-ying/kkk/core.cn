
: if
  << string[address, length] --
     address, string[address, length] >>
  *false?branch* save-into,jo-heap
  *current-free-address,jo-heap* xx|swap|x
  0 save-into,jo-heap
  end
; define-macro

: else
  << address, string[address, length] --
     address, string[address, length] >>
  *branch* save-into,jo-heap
  x|swap|xx
  *current-free-address,jo-heap* xxx|swap|x
  0 save-into,jo-heap
  << address, string[address, length], address >>
  *current-free-address,jo-heap*
  over sub *jo-size* div
  swap save
  end
; define-macro

: then
  << address, string[address, length] --
     string[address, length] >>
  x|swap|xx
  *current-free-address,jo-heap*
  over sub *jo-size* div
  swap save
  end
; define-macro

: fib_run
dup one? if drop drop end 
then sub1  xx|swap|x swap over add x|swap|xx  fib_run end
; define-function

: fib 
1 1 x|swap|xx fib_run end
; define-function

1 fib . 2 fib . 3 fib . 4 fib .
5 fib . 6 fib . 7 fib . 8 fib .

cr
3 8 gcd .
8 24 gcd .
51 68 gcd .

: gcd2
dup zero? false?branch 3 drop end
swap over moddiv drop gcd2 end 
; define-function

