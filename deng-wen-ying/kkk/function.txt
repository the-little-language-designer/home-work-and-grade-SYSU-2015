
.
.s
:
<<
address->primitive-string
bar-ket-char?
basic-REPL
char->decimal-digital
char-string?
colon-string?
comment-begin-string?
comment-end-string?
decimal-digital->char
define-exception
define-function
define-macro
define-variable
digital-char?
digital-string->integer
digital-string?
div
divmod
error-report,load-file
eval-string
exception-jo?
execute-word
false?
fetch2
find
find-char,string
function-jo?
gcd
have-unreaded-ket-char?
help,digital-string->integer
help,find
help,power
help,read-word->buffer,bar-ket
help,read-word->buffer,regular
help,string->word-end
help,write-nature-number
integer-string?
jo->link
jo->name
jo->pre-jo
jo->type
last-jo,dictionary?
little_test
load-file
load-init-file
macro-jo?
make-jojo
make-jojo,dispatch-jo
make-jojo,dispatch-word
mod
negate
negative?
one?
positive?
power
primitive-function-jo?
read-byte
read-byte,without-unread
read-word
read-word->buffer
read-word-begin-char
read-word-for-REPL
save-into,jo-heap
save-into,primitive-string-heap
save2
semicolon-string?
space-char?
space-string?
string->integer
string->word-begin
string->word-end
string-equal?
string-head,char
string-head,word
string-tail,char
string-tail,word
true?
unread-ket-char
variable-jo?
welcome
write-integer
write-nature-number
write-not-integer-string-report,for-branch
write-not-integer-string-report,for-double-quote
write-not-integer-string-report,for-false?branch
write-string
write-undefined-word-report,for-address
write-undefined-word-report,for-execute-word
write-undefined-word-report,for-make-jojo
zero-string?
zero?
