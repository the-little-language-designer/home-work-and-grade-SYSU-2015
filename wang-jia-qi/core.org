#+TITLE:  小蟬語核 / core of cicada-nymph
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+EMAIL:  xyheme@gmail.com

* todo
** syntax for exception handling in cicada-nymph
* ===================================
* misc
  #+begin_src cicada-nymph :tangle core.cn
  : cr << cr denotes carriage return >>
    << -- >>
    10 write-byte
    end
  ; define-function
  #+end_src
* -----------------------------------
* if & else & then
  * one predicate can make two branchs
    three predicates can make four branchs
    three predicates may only make three branchs
    but indeed there must be an invisible branch
  #+begin_src cicada-nymph :tangle core.cn
  : if
    << string[address, length] --
       address, string[address, length] >>
    *false?branch* save-into,jo-heap
    *current-free-address,jo-heap* xx|swap|x
    0 save-into,jo-heap
    end
  ; define-macro

  : else
    << address, string[address, length] --
       address, string[address, length] >>
    *branch* save-into,jo-heap
    x|swap|xx
    *current-free-address,jo-heap* xxx|swap|x
    0 save-into,jo-heap
    << address, string[address, length], address >>
    *current-free-address,jo-heap*
    over sub *jo-size* div
    swap save
    end
  ; define-macro

  : then
    << address, string[address, length] --
       string[address, length] >>
    x|swap|xx
    *current-free-address,jo-heap*
    over sub *jo-size* div
    swap save
    end
  ; define-macro
  #+end_src
* test
  #+begin_src cicada-nymph :tangle core.cn.test
  : kkk
    "kkk took my baby away !" write-string
    cr
    end
  ; define-function

  : factorial
    << number -- number >>
    dup
    one? if
      end
    then
    dup sub1 factorial
    mul
    end
  ; define-function


  cr
  1 factorial . cr
  2 factorial . cr
  3 factorial . cr
  4 factorial . cr
  5 factorial . cr
  6 factorial . cr
  7 factorial . cr
  8 factorial . cr
  9 factorial . cr
  10 factorial . cr
  11 factorial . cr
  12 factorial . cr
  13 factorial . cr
  14 factorial . cr
  15 factorial . cr
  16 factorial . cr
  17 factorial . cr
  18 factorial . cr
  19 factorial . cr
  20 factorial . cr


  : .12
    << 1 2 -- >>
    2 equal? if
      "(^-^)" write-string
      1 equal? if
        "\^o^/" write-string
      else
        "     " write-string
      then
    else
      "     " write-string
      1 equal? if
        "\^o^/" write-string
      else
        "     " write-string
      then
    then
    end
  ; define-function

  cr
  1 2 .12 cr
  6 2 .12 cr
  1 6 .12 cr
  6 6 .12 cr
  #+end_src
* -----------------------------------
* re-define execute-word & basic-REPL
  * to protect macro & exception from be called from basic-REPL
  #+begin_src cicada-nymph :tangle core.cn
  : execute-word
    << word[address, length] -- unknown >>
    dup2 integer-string? if
      string->integer
      end
    then
    dup2
    find if
      dup macro-jo? if
        drop
        "* (execute-word) CAN NOT EXECUTE MACRO DIRECTLY : " write-string
        write-string cr
        end
      then
      dup exception-jo? if
        drop
        "* (execute-word) CAN NOT EXECUTE EXCEPTION DIRECTLY : " write-string
        write-string cr
        end
      then
      << function & primitive-function & variable >>
      xx|swap|x drop2
      execute-jo
      end
    else
    "* (execute-word) MEETS UNDEFINED WORD : " write-string
    write-string cr
    then
    end
  ; define-function

  : basic-REPL
    << unknown -- unknown >>
    read-word-for-REPL
    execute-word
    <> basic-REPL
  ; define-function

  basic-REPL
  #+end_src
* report
** show-dictionary,primitive-function
   #+begin_src cicada-nymph :tangle core.cn
   : loop,show-dictionary,primitive-function
     << counter, jo -- >>
     dup zero? if
       drop
       end
     then
     dup primitive-function-jo? false? if
       jo->pre-jo
       <> loop,show-dictionary,primitive-function
     then
     swap
       "  " write-string
       dup . add1
     swap
     dup jo->name
     dup2 space-string? if
       drop2
       "UN-NAMED" write-string cr
     else
       write-string cr
     then
     jo->pre-jo
     <> loop,show-dictionary,primitive-function
   ; define-function

   : show-dictionary,primitive-function
     << -- >>
     "* ALL PRIMITIVE-FUNCTION IN DICTIONARY :" write-string cr
     1
     *first-jo-in-dictionary*
     loop,show-dictionary,primitive-function
     end
   ; define-function
   #+end_src
** show-dictionary,function
   #+begin_src cicada-nymph :tangle core.cn
   : loop,show-dictionary,function
     << counter, jo -- >>
     dup zero? if
       drop
       end
     then
     dup function-jo? false? if
       jo->pre-jo
       <> loop,show-dictionary,function
     then
     swap
       "  " write-string
       dup . add1
     swap
     dup jo->name
     dup2 space-string? if
       drop2
       "UN-NAMED" write-string cr
     else
       write-string cr
     then
     jo->pre-jo
     <> loop,show-dictionary,function
   ; define-function

   : show-dictionary,function
     << -- >>
     "* ALL FUNCTION IN DICTIONARY :" write-string cr
     1
     *first-jo-in-dictionary*
     loop,show-dictionary,function
     end
   ; define-function
   #+end_src
** show-dictionary,macro
   #+begin_src cicada-nymph :tangle core.cn
   : loop,show-dictionary,macro
     << counter, jo -- >>
     dup zero? if
       drop
       end
     then
     dup macro-jo? false? if
       jo->pre-jo
       <> loop,show-dictionary,macro
     then
     swap
       "  " write-string
       dup . add1
     swap
     dup jo->name
     dup2 space-string? if
       drop2
       "UN-NAMED" write-string cr
     else
       write-string cr
     then
     jo->pre-jo
     <> loop,show-dictionary,macro
   ; define-function

   : show-dictionary,macro
     << -- >>
     "* ALL MACRO IN DICTIONARY :" write-string cr
     1
     *first-jo-in-dictionary*
     loop,show-dictionary,macro
     end
   ; define-function
   #+end_src
** show-dictionary,exception
   #+begin_src cicada-nymph :tangle core.cn
   : loop,show-dictionary,exception
     << counter, jo -- >>
     dup zero? if
       drop
       end
     then
     dup exception-jo? false? if
       jo->pre-jo
       <> loop,show-dictionary,exception
     then
     swap
       "  " write-string
       dup . add1
     swap
     dup jo->name
     dup2 space-string? if
       drop2
       "UN-NAMED" write-string cr
     else
       write-string cr
     then
     jo->pre-jo
     <> loop,show-dictionary,exception
   ; define-function

   : show-dictionary,exception
     << -- >>
     "* ALL EXCEPTION IN DICTIONARY :" write-string cr
     1
     *first-jo-in-dictionary*
     loop,show-dictionary,exception
     end
   ; define-function
   #+end_src
** show-dictionary,variable
   #+begin_src cicada-nymph :tangle core.cn
   : loop,show-dictionary,variable
     << counter, jo -- >>
     dup zero? if
       drop
       end
     then
     dup variable-jo? false? if
       jo->pre-jo
       <> loop,show-dictionary,variable
     then
     swap
       "  " write-string
       dup . add1
     swap
     dup jo->name
     dup2 space-string? if
       drop2
       "UN-NAMED" write-string cr
     else
       write-string cr
     then
     jo->pre-jo
     <> loop,show-dictionary,variable
   ; define-function

   : show-dictionary,variable
     << -- >>
     "* ALL VARIABLE IN DICTIONARY :" write-string cr
     1
     *first-jo-in-dictionary*
     loop,show-dictionary,variable
     end
   ; define-function
   #+end_src
** show-dictionary
   * different types of words in dictionary
     are showed separately
   #+begin_src cicada-nymph :tangle core.cn
   : show-dictionary
     << -- >>
     show-dictionary,primitive-function
     show-dictionary,function
     show-dictionary,macro
     show-dictionary,exception
     show-dictionary,variable
     end
   ; define-function
   #+end_src
** report-memory
   #+begin_src cicada-nymph :tangle core.cn
   : report-memory
     << -- >>
     "* *un-initialized-memory*" write-string cr
     "  * SIZE : " write-string
          *size,un-initialized-memory*
          . cr
     "  * USED : " write-string
          *current-free-address,un-initialized-memory*
          *un-initialized-memory*
          sub . cr
     "  * FREE : " write-string
          *size,un-initialized-memory*
          *current-free-address,un-initialized-memory*
          *un-initialized-memory*
          sub sub . cr
     "* *primitive-string-heap*" write-string cr
     "  * SIZE : " write-string
          *size,primitive-string-heap*
          . cr
     "  * USED : " write-string
          *current-free-address,primitive-string-heap*
          *primitive-string-heap*
          sub . cr
     "  * FREE : " write-string
          *size,primitive-string-heap*
          *current-free-address,primitive-string-heap*
          *primitive-string-heap*
          sub sub . cr
     "* *jo-heap*" write-string cr
     "  * SIZE : " write-string
          *size,jo-heap* . cr
     "  * USED : " write-string
          *current-free-address,jo-heap*
          *jo-heap*
          sub . cr
     "  * FREE : " write-string
          *size,jo-heap*
          *current-free-address,jo-heap*
          *jo-heap*
          sub sub . cr
     end
   ; define-function
   #+end_src
* -----------------------------------
* allocate
  * an interface of *un-initialized-memory*
  #+begin_src cicada-nymph :tangle core.cn
  : allocate
    << size -- address >>
    *un-initialized-memory* tuck
    add address *un-initialized-memory* save
    end
  ; define-function
  #+end_src
* ===================================
* test
  #+begin_src cicada-nymph :tangle core.cn
  : test
    << -- >>
    "core.cn.test" load-file
    end
  ; define-function
  #+end_src
* ===================================
